# AUTOGENERATED! DO NOT EDIT! File to edit: ../media_campaign_cost_k_fold.ipynb.

# %% auto 0
__all__ = ['comp', 'path', 'df_train', 'df_test', 'df_comb', 'train_idxs', 'test_idxs', 'dep_var', 'procs', 'cont', 'cat',
           'splits', 'to_final', 'test_final', 'dls_final', 'epochs', 'learn_final', 'test_dl', 'preds_final', 'xs',
           'y', 'valid_xs', 'valid_y', 'test_xs', 'm', 'rf_preds', 'ens_preds', 'sample_df', 'rf', 'r_mse', 'm_rmse',
           'rf_feat_importance']

# %% ../media_campaign_cost_k_fold.ipynb 4
from fastai.tabular.all import *
from sklearn.model_selection import KFold
from sklearn.ensemble import RandomForestRegressor

# %% ../media_campaign_cost_k_fold.ipynb 6
try: import fastkaggle
except ModuleNotFoundError:
    !pip install -Uq fastkaggle

from fastkaggle import *

# %% ../media_campaign_cost_k_fold.ipynb 7
comp = 'playground-series-s3e11'
path = setup_comp(comp, install='fastai')

# %% ../media_campaign_cost_k_fold.ipynb 10
df_train = pd.read_csv(path/'train.csv', low_memory=False)
df_test = pd.read_csv(path/'test.csv', low_memory=False)

# %% ../media_campaign_cost_k_fold.ipynb 11
df_comb = pd.concat([df_train, df_test], ignore_index=True)

# %% ../media_campaign_cost_k_fold.ipynb 12
df_train.drop(['id'], axis=1, inplace=True)
df_test.drop(['id'], axis=1, inplace=True)
df_comb.drop(['id'], axis=1, inplace=True)

# %% ../media_campaign_cost_k_fold.ipynb 13
df_train['store_sales_per_children'] = df_train['store_sales(in millions)'] / df_train['total_children']

# %% ../media_campaign_cost_k_fold.ipynb 15
for column in df_train.columns:
    if (list(df_train[column].unique()) == [0.0, 1.0]):
        df_train.loc[:, column] = df_train[column].astype('bool')

# %% ../media_campaign_cost_k_fold.ipynb 16
train_idxs = np.arange(len(df_train))

# %% ../media_campaign_cost_k_fold.ipynb 17
test_idxs = np.arange(len(df_train), len(df_comb))

# %% ../media_campaign_cost_k_fold.ipynb 18
dep_var = 'cost'

# %% ../media_campaign_cost_k_fold.ipynb 19
procs = [Categorify, FillMissing, Normalize]

# %% ../media_campaign_cost_k_fold.ipynb 20
cont, cat = cont_cat_split(df_comb, max_card=1, dep_var=dep_var)

# %% ../media_campaign_cost_k_fold.ipynb 21
splits = RandomSplitter(valid_pct=0.2)(range_of(df_train))

# %% ../media_campaign_cost_k_fold.ipynb 22
df_train = df_comb.iloc[train_idxs]
df_test = df_comb.iloc[test_idxs]

# %% ../media_campaign_cost_k_fold.ipynb 29
splits = RandomSplitter(valid_pct=0.2)(range_of(df_train))

# %% ../media_campaign_cost_k_fold.ipynb 30
to_final = TabularPandas(df_train, procs, cat, cont, y_names=dep_var, splits=splits)
test_final = TabularPandas(df_test, procs, cat, cont, y_names=None, splits=None)
dls_final = to_final.dataloaders(bs=1024)

# %% ../media_campaign_cost_k_fold.ipynb 31
epochs=17

# %% ../media_campaign_cost_k_fold.ipynb 33
learn_final = tabular_learner(dls_final, layers=[200, 100], y_range=(0, 150), metrics=rmse)
learn_final.fit_one_cycle(epochs, 1e-2)

# %% ../media_campaign_cost_k_fold.ipynb 34
test_dl = learn_final.dls.test_dl(df_test)
preds_final, _ = learn_final.get_preds(dl=test_dl)

# %% ../media_campaign_cost_k_fold.ipynb 36
preds_final = preds_final.squeeze()

# %% ../media_campaign_cost_k_fold.ipynb 39
xs, y = to_final.train.xs, to_final.train.y
valid_xs, valid_y = to_final.valid.xs, to_final.valid.y
test_xs = test_final.train.xs

# %% ../media_campaign_cost_k_fold.ipynb 40
def rf(xs, y, n_estimators=40, max_samples=200_000, max_features=0.5, min_samples_leaf=5, **kwargs):
    return RandomForestRegressor(n_jobs=-1, n_estimators=n_estimators, 
                                 max_samples=max_samples, max_features=max_features,
                                 min_samples_leaf=min_samples_leaf, oob_score=True).fit(xs, y)

# %% ../media_campaign_cost_k_fold.ipynb 41
def r_mse(pred, y):
    return round(math.sqrt(((pred-y)**2).mean()), 6)

# %% ../media_campaign_cost_k_fold.ipynb 42
def m_rmse(m, xs, y):
    return r_mse(m.predict(xs), y)

# %% ../media_campaign_cost_k_fold.ipynb 43
m = rf(xs, y, n_estimators=100)

# %% ../media_campaign_cost_k_fold.ipynb 45
def rf_feat_importance(m, df):
    return pd.DataFrame({'cols':df.columns, 'imp': m.feature_importances_}).sort_values('imp', ascending=False) 

# %% ../media_campaign_cost_k_fold.ipynb 47
rf_preds = m.predict(test_xs)

# %% ../media_campaign_cost_k_fold.ipynb 50
ens_preds = (to_np(preds_final) + rf_preds) /2

# %% ../media_campaign_cost_k_fold.ipynb 51
sample_df = pd.read_csv(path/'sample_submission.csv')
sample_df['cost'] = preds_final
sample_df.to_csv('submission.csv', index=False)
